import { ComprehendMedicalServiceException as __BaseException } from "./ComprehendMedicalServiceException";
export const EntityType = {
    ANATOMY: "ANATOMY",
    BEHAVIORAL_ENVIRONMENTAL_SOCIAL: "BEHAVIORAL_ENVIRONMENTAL_SOCIAL",
    MEDICAL_CONDITION: "MEDICAL_CONDITION",
    MEDICATION: "MEDICATION",
    PROTECTED_HEALTH_INFORMATION: "PROTECTED_HEALTH_INFORMATION",
    TEST_TREATMENT_PROCEDURE: "TEST_TREATMENT_PROCEDURE",
    TIME_EXPRESSION: "TIME_EXPRESSION",
};
export const RelationshipType = {
    ACUITY: "ACUITY",
    ADMINISTERED_VIA: "ADMINISTERED_VIA",
    AMOUNT: "AMOUNT",
    DIRECTION: "DIRECTION",
    DOSAGE: "DOSAGE",
    DURATION: "DURATION",
    EVERY: "EVERY",
    FOR: "FOR",
    FORM: "FORM",
    FREQUENCY: "FREQUENCY",
    NEGATIVE: "NEGATIVE",
    OVERLAP: "OVERLAP",
    QUALITY: "QUALITY",
    RATE: "RATE",
    ROUTE_OR_MODE: "ROUTE_OR_MODE",
    STRENGTH: "STRENGTH",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
    TEST_UNIT: "TEST_UNIT",
    TEST_UNITS: "TEST_UNITS",
    TEST_VALUE: "TEST_VALUE",
    USAGE: "USAGE",
    WITH_DOSAGE: "WITH_DOSAGE",
};
export const AttributeName = {
    DIAGNOSIS: "DIAGNOSIS",
    FUTURE: "FUTURE",
    HYPOTHETICAL: "HYPOTHETICAL",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    NEGATION: "NEGATION",
    PAST_HISTORY: "PAST_HISTORY",
    PERTAINS_TO_FAMILY: "PERTAINS_TO_FAMILY",
    SIGN: "SIGN",
    SYMPTOM: "SYMPTOM",
};
export const EntitySubType = {
    ACUITY: "ACUITY",
    ADDRESS: "ADDRESS",
    AGE: "AGE",
    ALCOHOL_CONSUMPTION: "ALCOHOL_CONSUMPTION",
    ALLERGIES: "ALLERGIES",
    AMOUNT: "AMOUNT",
    BRAND_NAME: "BRAND_NAME",
    CONTACT_POINT: "CONTACT_POINT",
    DATE: "DATE",
    DIRECTION: "DIRECTION",
    DOSAGE: "DOSAGE",
    DURATION: "DURATION",
    DX_NAME: "DX_NAME",
    EMAIL: "EMAIL",
    FORM: "FORM",
    FREQUENCY: "FREQUENCY",
    GENDER: "GENDER",
    GENERIC_NAME: "GENERIC_NAME",
    ID: "ID",
    IDENTIFIER: "IDENTIFIER",
    NAME: "NAME",
    PHONE_OR_FAX: "PHONE_OR_FAX",
    PROCEDURE_NAME: "PROCEDURE_NAME",
    PROFESSION: "PROFESSION",
    QUALITY: "QUALITY",
    QUANTITY: "QUANTITY",
    RACE_ETHNICITY: "RACE_ETHNICITY",
    RATE: "RATE",
    REC_DRUG_USE: "REC_DRUG_USE",
    ROUTE_OR_MODE: "ROUTE_OR_MODE",
    STRENGTH: "STRENGTH",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
    TEST_NAME: "TEST_NAME",
    TEST_UNIT: "TEST_UNIT",
    TEST_UNITS: "TEST_UNITS",
    TEST_VALUE: "TEST_VALUE",
    TIME_EXPRESSION: "TIME_EXPRESSION",
    TIME_TO_DX_NAME: "TIME_TO_DX_NAME",
    TIME_TO_MEDICATION_NAME: "TIME_TO_MEDICATION_NAME",
    TIME_TO_PROCEDURE_NAME: "TIME_TO_PROCEDURE_NAME",
    TIME_TO_TEST_NAME: "TIME_TO_TEST_NAME",
    TIME_TO_TREATMENT_NAME: "TIME_TO_TREATMENT_NAME",
    TOBACCO_USE: "TOBACCO_USE",
    TREATMENT_NAME: "TREATMENT_NAME",
    URL: "URL",
};
export const JobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
export const LanguageCode = {
    EN: "en",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidEncodingException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidEncodingException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEncodingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEncodingException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class TextSizeLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TextSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ICD10CMEntityType = {
    DX_NAME: "DX_NAME",
    TIME_EXPRESSION: "TIME_EXPRESSION",
};
export const ICD10CMRelationshipType = {
    OVERLAP: "OVERLAP",
    QUALITY: "QUALITY",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
};
export const ICD10CMTraitName = {
    DIAGNOSIS: "DIAGNOSIS",
    HYPOTHETICAL: "HYPOTHETICAL",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    NEGATION: "NEGATION",
    PERTAINS_TO_FAMILY: "PERTAINS_TO_FAMILY",
    SIGN: "SIGN",
    SYMPTOM: "SYMPTOM",
};
export const ICD10CMAttributeType = {
    ACUITY: "ACUITY",
    DIRECTION: "DIRECTION",
    QUALITY: "QUALITY",
    QUANTITY: "QUANTITY",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
    TIME_EXPRESSION: "TIME_EXPRESSION",
    TIME_TO_DX_NAME: "TIME_TO_DX_NAME",
};
export const ICD10CMEntityCategory = {
    MEDICAL_CONDITION: "MEDICAL_CONDITION",
};
export const RxNormTraitName = {
    NEGATION: "NEGATION",
    PAST_HISTORY: "PAST_HISTORY",
};
export const RxNormAttributeType = {
    DOSAGE: "DOSAGE",
    DURATION: "DURATION",
    FORM: "FORM",
    FREQUENCY: "FREQUENCY",
    RATE: "RATE",
    ROUTE_OR_MODE: "ROUTE_OR_MODE",
    STRENGTH: "STRENGTH",
};
export const RxNormEntityCategory = {
    MEDICATION: "MEDICATION",
};
export const RxNormEntityType = {
    BRAND_NAME: "BRAND_NAME",
    GENERIC_NAME: "GENERIC_NAME",
};
export const SNOMEDCTEntityCategory = {
    ANATOMY: "ANATOMY",
    MEDICAL_CONDITION: "MEDICAL_CONDITION",
    TEST_TREATMENT_PROCEDURE: "TEST_TREATMENT_PROCEDURE",
};
export const SNOMEDCTRelationshipType = {
    ACUITY: "ACUITY",
    DIRECTION: "DIRECTION",
    QUALITY: "QUALITY",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
    TEST_UNIT: "TEST_UNIT",
    TEST_UNITS: "TEST_UNITS",
    TEST_VALUE: "TEST_VALUE",
};
export const SNOMEDCTTraitName = {
    DIAGNOSIS: "DIAGNOSIS",
    FUTURE: "FUTURE",
    HYPOTHETICAL: "HYPOTHETICAL",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    NEGATION: "NEGATION",
    PAST_HISTORY: "PAST_HISTORY",
    PERTAINS_TO_FAMILY: "PERTAINS_TO_FAMILY",
    SIGN: "SIGN",
    SYMPTOM: "SYMPTOM",
};
export const SNOMEDCTAttributeType = {
    ACUITY: "ACUITY",
    DIRECTION: "DIRECTION",
    QUALITY: "QUALITY",
    SYSTEM_ORGAN_SITE: "SYSTEM_ORGAN_SITE",
    TEST_UNIT: "TEST_UNIT",
    TEST_VALUE: "TEST_VALUE",
};
export const SNOMEDCTEntityType = {
    DX_NAME: "DX_NAME",
    PROCEDURE_NAME: "PROCEDURE_NAME",
    TEST_NAME: "TEST_NAME",
    TREATMENT_NAME: "TREATMENT_NAME",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
