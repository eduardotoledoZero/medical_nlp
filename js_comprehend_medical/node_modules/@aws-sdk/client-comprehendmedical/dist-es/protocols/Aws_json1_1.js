import { _json, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@aws-sdk/smithy-client";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { v4 as generateIdempotencyToken } from "uuid";
import { ComprehendMedicalServiceException as __BaseException } from "../models/ComprehendMedicalServiceException";
import { InternalServerException, InvalidEncodingException, InvalidRequestException, ResourceNotFoundException, ServiceUnavailableException, TextSizeLimitExceededException, TooManyRequestsException, ValidationException, } from "../models/models_0";
export const se_DescribeEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntitiesDetectionV2Job");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeICD10CMInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeICD10CMInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePHIDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePHIDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRxNormInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRxNormInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSNOMEDCTInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectEntities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectEntitiesV2Command = async (input, context) => {
    const headers = sharedHeaders("DetectEntitiesV2");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectPHICommand = async (input, context) => {
    const headers = sharedHeaders("DetectPHI");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_InferICD10CMCommand = async (input, context) => {
    const headers = sharedHeaders("InferICD10CM");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_InferRxNormCommand = async (input, context) => {
    const headers = sharedHeaders("InferRxNorm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_InferSNOMEDCTCommand = async (input, context) => {
    const headers = sharedHeaders("InferSNOMEDCT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEntitiesDetectionV2JobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntitiesDetectionV2Jobs");
    let body;
    body = JSON.stringify(se_ListEntitiesDetectionV2JobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListICD10CMInferenceJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListICD10CMInferenceJobs");
    let body;
    body = JSON.stringify(se_ListICD10CMInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPHIDetectionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPHIDetectionJobs");
    let body;
    body = JSON.stringify(se_ListPHIDetectionJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRxNormInferenceJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRxNormInferenceJobs");
    let body;
    body = JSON.stringify(se_ListRxNormInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSNOMEDCTInferenceJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSNOMEDCTInferenceJobs");
    let body;
    body = JSON.stringify(se_ListSNOMEDCTInferenceJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = sharedHeaders("StartEntitiesDetectionV2Job");
    let body;
    body = JSON.stringify(se_StartEntitiesDetectionV2JobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartICD10CMInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartICD10CMInferenceJob");
    let body;
    body = JSON.stringify(se_StartICD10CMInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartPHIDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartPHIDetectionJob");
    let body;
    body = JSON.stringify(se_StartPHIDetectionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartRxNormInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartRxNormInferenceJob");
    let body;
    body = JSON.stringify(se_StartRxNormInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartSNOMEDCTInferenceJob");
    let body;
    body = JSON.stringify(se_StartSNOMEDCTInferenceJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEntitiesDetectionV2JobCommand = async (input, context) => {
    const headers = sharedHeaders("StopEntitiesDetectionV2Job");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopICD10CMInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopICD10CMInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopPHIDetectionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopPHIDetectionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRxNormInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopRxNormInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopSNOMEDCTInferenceJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopSNOMEDCTInferenceJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_DescribeEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEntitiesDetectionV2JobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeICD10CMInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribePHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePHIDetectionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRxNormInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DescribeSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSNOMEDCTInferenceJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectEntitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectEntitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectEntitiesV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectEntitiesV2CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectEntitiesV2Response(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectEntitiesV2CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_DetectPHICommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetectPHICommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectPHIResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectPHICommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_InferICD10CMCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InferICD10CMCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InferICD10CMResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InferICD10CMCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_InferRxNormCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InferRxNormCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InferRxNormResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InferRxNormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_InferSNOMEDCTCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_InferSNOMEDCTCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_InferSNOMEDCTResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InferSNOMEDCTCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidEncodingException":
        case "com.amazonaws.comprehendmedical#InvalidEncodingException":
            throw await de_InvalidEncodingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.comprehendmedical#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.comprehendmedical#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListEntitiesDetectionV2JobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListEntitiesDetectionV2JobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEntitiesDetectionV2JobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEntitiesDetectionV2JobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListICD10CMInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListICD10CMInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListICD10CMInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListICD10CMInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListPHIDetectionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPHIDetectionJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPHIDetectionJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPHIDetectionJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListRxNormInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListRxNormInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRxNormInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListRxNormInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListSNOMEDCTInferenceJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListSNOMEDCTInferenceJobsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSNOMEDCTInferenceJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSNOMEDCTInferenceJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.comprehendmedical#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartPHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartPHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartPHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StartSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopEntitiesDetectionV2JobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopEntitiesDetectionV2JobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopEntitiesDetectionV2JobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopICD10CMInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopICD10CMInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopICD10CMInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopPHIDetectionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopPHIDetectionJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopPHIDetectionJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopRxNormInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopRxNormInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopRxNormInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_StopSNOMEDCTInferenceJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopSNOMEDCTInferenceJobCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopSNOMEDCTInferenceJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.comprehendmedical#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.comprehendmedical#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.comprehendmedical#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.comprehendmedical#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEncodingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TextSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ComprehendMedicalAsyncJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmitTimeAfter: (_) => Math.round(_.getTime() / 1000),
        SubmitTimeBefore: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListEntitiesDetectionV2JobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_ComprehendMedicalAsyncJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListICD10CMInferenceJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_ComprehendMedicalAsyncJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListPHIDetectionJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_ComprehendMedicalAsyncJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListRxNormInferenceJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_ComprehendMedicalAsyncJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListSNOMEDCTInferenceJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_ComprehendMedicalAsyncJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_StartEntitiesDetectionV2JobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        KMSKey: [],
        LanguageCode: [],
        OutputDataConfig: _json,
    });
};
const se_StartICD10CMInferenceJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        KMSKey: [],
        LanguageCode: [],
        OutputDataConfig: _json,
    });
};
const se_StartPHIDetectionJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        KMSKey: [],
        LanguageCode: [],
        OutputDataConfig: _json,
    });
};
const se_StartRxNormInferenceJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        KMSKey: [],
        LanguageCode: [],
        OutputDataConfig: _json,
    });
};
const se_StartSNOMEDCTInferenceJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        KMSKey: [],
        LanguageCode: [],
        OutputDataConfig: _json,
    });
};
const de_Attribute = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        RelationshipScore: __limitedParseFloat32,
        RelationshipType: __expectString,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_TraitList(_, context),
        Type: __expectString,
    });
};
const de_AttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Attribute(entry, context);
    });
    return retVal;
};
const de_ComprehendMedicalAsyncJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExpirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        KMSKey: __expectString,
        LanguageCode: __expectString,
        ManifestFilePath: __expectString,
        Message: __expectString,
        ModelVersion: __expectString,
        OutputDataConfig: _json,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ComprehendMedicalAsyncJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComprehendMedicalAsyncJobProperties(entry, context);
    });
    return retVal;
};
const de_DescribeEntitiesDetectionV2JobResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobProperties: (_) => de_ComprehendMedicalAsyncJobProperties(_, context),
    });
};
const de_DescribeICD10CMInferenceJobResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobProperties: (_) => de_ComprehendMedicalAsyncJobProperties(_, context),
    });
};
const de_DescribePHIDetectionJobResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobProperties: (_) => de_ComprehendMedicalAsyncJobProperties(_, context),
    });
};
const de_DescribeRxNormInferenceJobResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobProperties: (_) => de_ComprehendMedicalAsyncJobProperties(_, context),
    });
};
const de_DescribeSNOMEDCTInferenceJobResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobProperties: (_) => de_ComprehendMedicalAsyncJobProperties(_, context),
    });
};
const de_DetectEntitiesResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_EntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
        UnmappedAttributes: (_) => de_UnmappedAttributeList(_, context),
    });
};
const de_DetectEntitiesV2Response = (output, context) => {
    return take(output, {
        Entities: (_) => de_EntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
        UnmappedAttributes: (_) => de_UnmappedAttributeList(_, context),
    });
};
const de_DetectPHIResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_EntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
    });
};
const de_Entity = (output, context) => {
    return take(output, {
        Attributes: (_) => de_AttributeList(_, context),
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_TraitList(_, context),
        Type: __expectString,
    });
};
const de_EntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Entity(entry, context);
    });
    return retVal;
};
const de_ICD10CMAttribute = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        RelationshipScore: __limitedParseFloat32,
        RelationshipType: __expectString,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_ICD10CMTraitList(_, context),
        Type: __expectString,
    });
};
const de_ICD10CMAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ICD10CMAttribute(entry, context);
    });
    return retVal;
};
const de_ICD10CMConcept = (output, context) => {
    return take(output, {
        Code: __expectString,
        Description: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_ICD10CMConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ICD10CMConcept(entry, context);
    });
    return retVal;
};
const de_ICD10CMEntity = (output, context) => {
    return take(output, {
        Attributes: (_) => de_ICD10CMAttributeList(_, context),
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        ICD10CMConcepts: (_) => de_ICD10CMConceptList(_, context),
        Id: __expectInt32,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_ICD10CMTraitList(_, context),
        Type: __expectString,
    });
};
const de_ICD10CMEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ICD10CMEntity(entry, context);
    });
    return retVal;
};
const de_ICD10CMTrait = (output, context) => {
    return take(output, {
        Name: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_ICD10CMTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ICD10CMTrait(entry, context);
    });
    return retVal;
};
const de_InferICD10CMResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_ICD10CMEntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
    });
};
const de_InferRxNormResponse = (output, context) => {
    return take(output, {
        Entities: (_) => de_RxNormEntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
    });
};
const de_InferSNOMEDCTResponse = (output, context) => {
    return take(output, {
        Characters: _json,
        Entities: (_) => de_SNOMEDCTEntityList(_, context),
        ModelVersion: __expectString,
        PaginationToken: __expectString,
        SNOMEDCTDetails: _json,
    });
};
const de_ListEntitiesDetectionV2JobsResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobPropertiesList: (_) => de_ComprehendMedicalAsyncJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListICD10CMInferenceJobsResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobPropertiesList: (_) => de_ComprehendMedicalAsyncJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListPHIDetectionJobsResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobPropertiesList: (_) => de_ComprehendMedicalAsyncJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListRxNormInferenceJobsResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobPropertiesList: (_) => de_ComprehendMedicalAsyncJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListSNOMEDCTInferenceJobsResponse = (output, context) => {
    return take(output, {
        ComprehendMedicalAsyncJobPropertiesList: (_) => de_ComprehendMedicalAsyncJobPropertiesList(_, context),
        NextToken: __expectString,
    });
};
const de_RxNormAttribute = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        RelationshipScore: __limitedParseFloat32,
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_RxNormTraitList(_, context),
        Type: __expectString,
    });
};
const de_RxNormAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RxNormAttribute(entry, context);
    });
    return retVal;
};
const de_RxNormConcept = (output, context) => {
    return take(output, {
        Code: __expectString,
        Description: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_RxNormConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RxNormConcept(entry, context);
    });
    return retVal;
};
const de_RxNormEntity = (output, context) => {
    return take(output, {
        Attributes: (_) => de_RxNormAttributeList(_, context),
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        RxNormConcepts: (_) => de_RxNormConceptList(_, context),
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_RxNormTraitList(_, context),
        Type: __expectString,
    });
};
const de_RxNormEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RxNormEntity(entry, context);
    });
    return retVal;
};
const de_RxNormTrait = (output, context) => {
    return take(output, {
        Name: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_RxNormTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RxNormTrait(entry, context);
    });
    return retVal;
};
const de_SNOMEDCTAttribute = (output, context) => {
    return take(output, {
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        RelationshipScore: __limitedParseFloat32,
        RelationshipType: __expectString,
        SNOMEDCTConcepts: (_) => de_SNOMEDCTConceptList(_, context),
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_SNOMEDCTTraitList(_, context),
        Type: __expectString,
    });
};
const de_SNOMEDCTAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SNOMEDCTAttribute(entry, context);
    });
    return retVal;
};
const de_SNOMEDCTConcept = (output, context) => {
    return take(output, {
        Code: __expectString,
        Description: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_SNOMEDCTConceptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SNOMEDCTConcept(entry, context);
    });
    return retVal;
};
const de_SNOMEDCTEntity = (output, context) => {
    return take(output, {
        Attributes: (_) => de_SNOMEDCTAttributeList(_, context),
        BeginOffset: __expectInt32,
        Category: __expectString,
        EndOffset: __expectInt32,
        Id: __expectInt32,
        SNOMEDCTConcepts: (_) => de_SNOMEDCTConceptList(_, context),
        Score: __limitedParseFloat32,
        Text: __expectString,
        Traits: (_) => de_SNOMEDCTTraitList(_, context),
        Type: __expectString,
    });
};
const de_SNOMEDCTEntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SNOMEDCTEntity(entry, context);
    });
    return retVal;
};
const de_SNOMEDCTTrait = (output, context) => {
    return take(output, {
        Name: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_SNOMEDCTTraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SNOMEDCTTrait(entry, context);
    });
    return retVal;
};
const de_Trait = (output, context) => {
    return take(output, {
        Name: __expectString,
        Score: __limitedParseFloat32,
    });
};
const de_TraitList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Trait(entry, context);
    });
    return retVal;
};
const de_UnmappedAttribute = (output, context) => {
    return take(output, {
        Attribute: (_) => de_Attribute(_, context),
        Type: __expectString,
    });
};
const de_UnmappedAttributeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnmappedAttribute(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `ComprehendMedical_20181030.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
